using library_management_REST_API.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

[ApiController]
[Route("api/[controller]")]     //check auto ModelState

public class BooksController : ControllerBase
{
    private readonly IWebHostEnvironment _HostingEnv;
    private readonly UserManager<IdentityUser> _userManager;
    private readonly BookRepository _bookRepo;
    public BooksController(BookRepository bookRepo, 
                           IWebHostEnvironment HostingEnv,
                           UserManager<IdentityUser> userManager)
    {
        _userManager = userManager;
        _bookRepo = bookRepo;
        _HostingEnv = HostingEnv;
    }

    [HttpGet]   //api/books
    public async Task<ActionResult<IEnumerable<Book>>> getBooksAsync()
    {
        return Ok(await _bookRepo.GetAllBooksAsync());
    }

    [Authorize]
    [HttpGet("{id:int}")]    //api/books/1
    public async Task<ActionResult> getBookAsync(int id)
    {
        var userId = HttpContext.User.Claims.FirstOrDefault(e => e.Type == ClaimTypes.NameIdentifier) ?.Value; 
        var user = await _userManager.GetUserAsync(HttpContext.User); 
        var book = await _bookRepo.FindBookByIdAsync(id);
        if (book == null)
        {
            return NotFound();
        }
        return Ok(book);
    }

    [HttpPost]   //api/books
    public async Task<ActionResult> PostBookAsync([FromForm] Book book, IFormFile image)         //ApiController check auto ModelState 
    {
        book.imgUrl = uploadImg(image);
        book.NoOfBooks = new int();   //generated by ef
        var addedBook = await _bookRepo.AddBookAsync(book);
        return CreatedAtAction(nameof(getBookAsync), "Books", new { id = addedBook.NoOfBooks }, addedBook);/*returning a 201 Created response, with a Location header pointing to the url for the newly created response, and the object itself in the body. The url should be the url at which a GET request would return the object url. This would be considered the 'Correct' behaviour in a RESTful system.*/
    }

    [HttpPut("{id}")]    //api/books/1
    public async Task<ActionResult> PutBookAsync([FromRoute] int id, [FromForm] Book book, [FromForm] IFormFile image)
    {
        if (!await _bookRepo.Exists(id))
        {
            return NotFound($"Book with id={id} is not found");
        }
        if (id != book.NoOfBooks)
        {
            return BadRequest("Bad request");
        }
        book.imgUrl = uploadImg(image);
        await _bookRepo.UpdateBookAsync(book);
        return NoContent();
    }

    [HttpDelete("{id}")]    //api/books/1
    public async Task<ActionResult> DeleteBookAsync(int id)
    {
        var bookToDelete = await _bookRepo.FindBookByIdAsync(id);
        if (bookToDelete == null)
        {
            return NotFound($"Book with id={id} is not found");
        }
        try
        {
            if (bookToDelete.imgUrl != null && System.IO.File.Exists(bookToDelete.imgUrl))
                System.IO.File.Delete(bookToDelete.imgUrl);
        }
        catch (System.Exception) {  /*throw new Exception(e.Message);*/  }
        await _bookRepo.DeleteBookAsync(bookToDelete);
        return NoContent();
    }

    [HttpGet("search")] //api/books/search?title=des
    public async Task<ActionResult> SearchBookByTitleAsync(string title)
    {
        var searchResult = await _bookRepo.Get(b => b.Title.Contains(title));
        if (searchResult.Any())
            return Ok(searchResult);
        return NotFound();
    }

    private string uploadImg(IFormFile img)
    {
        string UniqueFileName = Guid.NewGuid().ToString().Substring(0, 10) + "_" + img.FileName;  //if (!System.IO.File.Exists(ImgPath)) {   //ImgPath+="2";  }
        if (!Directory.Exists(_HostingEnv.WebRootPath + "\\images")) Directory.CreateDirectory(_HostingEnv.WebRootPath + "\\images");
        var ImgPath = Path.Combine(_HostingEnv.WebRootPath, "images", UniqueFileName);
        var ImgStream = new FileStream(ImgPath, FileMode.Append);
        img.CopyTo(ImgStream);
        return ImgPath;
    }
}